
USART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000061c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800074c  08000754  00010754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800074c  0800074c  00010754  2**0
                  CONTENTS
  4 .ARM          00000000  0800074c  0800074c  00010754  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800074c  08000754  00010754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800074c  0800074c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000754  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000754  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010754  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001077d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006a6  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003a5  00000000  00000000  00010e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00011210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c0  00000000  00000000  00011328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016dd  00000000  00000000  000113e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007ab  00000000  00000000  00012ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005886  00000000  00000000  00013270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000314  00000000  00000000  00018af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00018e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000734 	.word	0x08000734

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000734 	.word	0x08000734

08000170 <GPIO_voidSetPinDirection>:
		/*		- Copy_u8Port: The port to set the pin direction for (GPIO_u8PORTA, GPIO_u8PORTB, GPIO_u8PORTC).			*/
		/*		- Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*		- Copy_u8PinDirection: The desired direction (GPIO_u8PIN_OUTPUT or GPIO_u8PIN_INPUT).						*/
		/********************************************************************************************************************/
		void GPIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinDirection)
		{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	f200 80b9 	bhi.w	80002fc <GPIO_voidSetPinDirection+0x18c>
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	2b0f      	cmp	r3, #15
 800018e:	f200 80b5 	bhi.w	80002fc <GPIO_voidSetPinDirection+0x18c>
			{
				switch(Copy_u8Port)
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	2b02      	cmp	r3, #2
 8000196:	d074      	beq.n	8000282 <GPIO_voidSetPinDirection+0x112>
 8000198:	2b02      	cmp	r3, #2
 800019a:	f300 80a8 	bgt.w	80002ee <GPIO_voidSetPinDirection+0x17e>
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d002      	beq.n	80001a8 <GPIO_voidSetPinDirection+0x38>
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d037      	beq.n	8000216 <GPIO_voidSetPinDirection+0xa6>
							GPIOC_CRH &= ~((GPIO_PIN_DIRECTION_MASK << (Copy_u8Pin * 4)));
							GPIOC_CRH |= (Copy_u8PinDirection<< (Copy_u8Pin * 4));
						}
						break;

					default : break;
 80001a6:	e0a2      	b.n	80002ee <GPIO_voidSetPinDirection+0x17e>
						if(Copy_u8Pin <= GPIO_u8PIN7)
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	2b07      	cmp	r3, #7
 80001ac:	d817      	bhi.n	80001de <GPIO_voidSetPinDirection+0x6e>
							GPIOA_CRL &= ~((GPIO_PIN_DIRECTION_MASK << (Copy_u8Pin * 4)));
 80001ae:	4b56      	ldr	r3, [pc, #344]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	79ba      	ldrb	r2, [r7, #6]
 80001b4:	0092      	lsls	r2, r2, #2
 80001b6:	210f      	movs	r1, #15
 80001b8:	fa01 f202 	lsl.w	r2, r1, r2
 80001bc:	43d2      	mvns	r2, r2
 80001be:	4611      	mov	r1, r2
 80001c0:	4a51      	ldr	r2, [pc, #324]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80001c2:	400b      	ands	r3, r1
 80001c4:	6013      	str	r3, [r2, #0]
							GPIOA_CRL |= (Copy_u8PinDirection<< (Copy_u8Pin * 4));
 80001c6:	4b50      	ldr	r3, [pc, #320]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	7979      	ldrb	r1, [r7, #5]
 80001cc:	79ba      	ldrb	r2, [r7, #6]
 80001ce:	0092      	lsls	r2, r2, #2
 80001d0:	fa01 f202 	lsl.w	r2, r1, r2
 80001d4:	4611      	mov	r1, r2
 80001d6:	4a4c      	ldr	r2, [pc, #304]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 80001d8:	430b      	orrs	r3, r1
 80001da:	6013      	str	r3, [r2, #0]
						break;
 80001dc:	e089      	b.n	80002f2 <GPIO_voidSetPinDirection+0x182>
						else if(Copy_u8Pin > GPIO_u8PIN7)
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	f240 8086 	bls.w	80002f2 <GPIO_voidSetPinDirection+0x182>
							GPIOA_CRH &= ~((GPIO_PIN_DIRECTION_MASK << (Copy_u8Pin * 4)));
 80001e6:	4b49      	ldr	r3, [pc, #292]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	210f      	movs	r1, #15
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a44      	ldr	r2, [pc, #272]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	6013      	str	r3, [r2, #0]
							GPIOA_CRH |= (Copy_u8PinDirection<< (Copy_u8Pin * 4));
 80001fe:	4b43      	ldr	r3, [pc, #268]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	7979      	ldrb	r1, [r7, #5]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a3f      	ldr	r2, [pc, #252]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6013      	str	r3, [r2, #0]
						break;
 8000214:	e06d      	b.n	80002f2 <GPIO_voidSetPinDirection+0x182>
						if(Copy_u8Pin <= GPIO_u8PIN7)
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d817      	bhi.n	800024c <GPIO_voidSetPinDirection+0xdc>
							GPIOB_CRL &= ~((GPIO_PIN_DIRECTION_MASK << (Copy_u8Pin * 4)));
 800021c:	4b3c      	ldr	r3, [pc, #240]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	79ba      	ldrb	r2, [r7, #6]
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	210f      	movs	r1, #15
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	43d2      	mvns	r2, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a38      	ldr	r2, [pc, #224]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 8000230:	400b      	ands	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
							GPIOB_CRL |= (Copy_u8PinDirection<< (Copy_u8Pin * 4));
 8000234:	4b36      	ldr	r3, [pc, #216]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4611      	mov	r1, r2
 8000244:	4a32      	ldr	r2, [pc, #200]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 8000246:	430b      	orrs	r3, r1
 8000248:	6013      	str	r3, [r2, #0]
						break;
 800024a:	e054      	b.n	80002f6 <GPIO_voidSetPinDirection+0x186>
						else if(Copy_u8Pin > GPIO_u8PIN7)
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	2b07      	cmp	r3, #7
 8000250:	d951      	bls.n	80002f6 <GPIO_voidSetPinDirection+0x186>
							GPIOB_CRH &= ~((GPIO_PIN_DIRECTION_MASK << (Copy_u8Pin * 4)));
 8000252:	4b30      	ldr	r3, [pc, #192]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	79ba      	ldrb	r2, [r7, #6]
 8000258:	0092      	lsls	r2, r2, #2
 800025a:	210f      	movs	r1, #15
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a2b      	ldr	r2, [pc, #172]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 8000266:	400b      	ands	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
							GPIOB_CRH |= (Copy_u8PinDirection<< (Copy_u8Pin * 4));
 800026a:	4b2a      	ldr	r3, [pc, #168]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	7979      	ldrb	r1, [r7, #5]
 8000270:	79ba      	ldrb	r2, [r7, #6]
 8000272:	0092      	lsls	r2, r2, #2
 8000274:	fa01 f202 	lsl.w	r2, r1, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a26      	ldr	r2, [pc, #152]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 800027c:	430b      	orrs	r3, r1
 800027e:	6013      	str	r3, [r2, #0]
						break;
 8000280:	e039      	b.n	80002f6 <GPIO_voidSetPinDirection+0x186>
						if(Copy_u8Pin <= GPIO_u8PIN7)
 8000282:	79bb      	ldrb	r3, [r7, #6]
 8000284:	2b07      	cmp	r3, #7
 8000286:	d817      	bhi.n	80002b8 <GPIO_voidSetPinDirection+0x148>
							GPIOC_CRL &= ~((GPIO_PIN_DIRECTION_MASK << (Copy_u8Pin * 4)));
 8000288:	4b23      	ldr	r3, [pc, #140]	; (8000318 <GPIO_voidSetPinDirection+0x1a8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	210f      	movs	r1, #15
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	4611      	mov	r1, r2
 800029a:	4a1f      	ldr	r2, [pc, #124]	; (8000318 <GPIO_voidSetPinDirection+0x1a8>)
 800029c:	400b      	ands	r3, r1
 800029e:	6013      	str	r3, [r2, #0]
							GPIOC_CRL |= (Copy_u8PinDirection<< (Copy_u8Pin * 4));
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <GPIO_voidSetPinDirection+0x1a8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	7979      	ldrb	r1, [r7, #5]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	0092      	lsls	r2, r2, #2
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a19      	ldr	r2, [pc, #100]	; (8000318 <GPIO_voidSetPinDirection+0x1a8>)
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6013      	str	r3, [r2, #0]
						break;
 80002b6:	e020      	b.n	80002fa <GPIO_voidSetPinDirection+0x18a>
						else if(Copy_u8Pin > GPIO_u8PIN7)
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	2b07      	cmp	r3, #7
 80002bc:	d91d      	bls.n	80002fa <GPIO_voidSetPinDirection+0x18a>
							GPIOC_CRH &= ~((GPIO_PIN_DIRECTION_MASK << (Copy_u8Pin * 4)));
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <GPIO_voidSetPinDirection+0x1ac>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	0092      	lsls	r2, r2, #2
 80002c6:	210f      	movs	r1, #15
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	43d2      	mvns	r2, r2
 80002ce:	4611      	mov	r1, r2
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <GPIO_voidSetPinDirection+0x1ac>)
 80002d2:	400b      	ands	r3, r1
 80002d4:	6013      	str	r3, [r2, #0]
							GPIOC_CRH |= (Copy_u8PinDirection<< (Copy_u8Pin * 4));
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <GPIO_voidSetPinDirection+0x1ac>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	7979      	ldrb	r1, [r7, #5]
 80002dc:	79ba      	ldrb	r2, [r7, #6]
 80002de:	0092      	lsls	r2, r2, #2
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <GPIO_voidSetPinDirection+0x1ac>)
 80002e8:	430b      	orrs	r3, r1
 80002ea:	6013      	str	r3, [r2, #0]
						break;
 80002ec:	e005      	b.n	80002fa <GPIO_voidSetPinDirection+0x18a>
					default : break;
 80002ee:	bf00      	nop
 80002f0:	e004      	b.n	80002fc <GPIO_voidSetPinDirection+0x18c>
						break;
 80002f2:	bf00      	nop
 80002f4:	e002      	b.n	80002fc <GPIO_voidSetPinDirection+0x18c>
						break;
 80002f6:	bf00      	nop
 80002f8:	e000      	b.n	80002fc <GPIO_voidSetPinDirection+0x18c>
						break;
 80002fa:	bf00      	nop
				}
			}
		}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40010800 	.word	0x40010800
 800030c:	40010804 	.word	0x40010804
 8000310:	40010c00 	.word	0x40010c00
 8000314:	40010c04 	.word	0x40010c04
 8000318:	40011000 	.word	0x40011000
 800031c:	40011004 	.word	0x40011004

08000320 <GPIO_voidSetPinValue>:
		/*        - Copy_u8Port: The port to set the pin value for (GPIO_u8PORTA, GPIO_u8PORTB, GPIO_u8PORTC, GPIO_u8PORTD).		*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*        - Copy_u8PinValue: The desired value (GPIO_u8PIN_HIGH or GPIO_u8PIN_LOW).										*/
		/************************************************************************************************************************/
		void GPIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinValue)
		{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	460b      	mov	r3, r1
 800032c:	71bb      	strb	r3, [r7, #6]
 800032e:	4613      	mov	r3, r2
 8000330:	717b      	strb	r3, [r7, #5]
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b02      	cmp	r3, #2
 8000336:	d864      	bhi.n	8000402 <GPIO_voidSetPinValue+0xe2>
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b0f      	cmp	r3, #15
 800033c:	d861      	bhi.n	8000402 <GPIO_voidSetPinValue+0xe2>
			{
				if(Copy_u8PinValue == GPIO_u8PIN_HIGH)
 800033e:	797b      	ldrb	r3, [r7, #5]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d12a      	bne.n	800039a <GPIO_voidSetPinValue+0x7a>
				{
					switch(Copy_u8Port)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d01c      	beq.n	8000384 <GPIO_voidSetPinValue+0x64>
 800034a:	2b02      	cmp	r3, #2
 800034c:	dc56      	bgt.n	80003fc <GPIO_voidSetPinValue+0xdc>
 800034e:	2b00      	cmp	r3, #0
 8000350:	d002      	beq.n	8000358 <GPIO_voidSetPinValue+0x38>
 8000352:	2b01      	cmp	r3, #1
 8000354:	d00b      	beq.n	800036e <GPIO_voidSetPinValue+0x4e>
					{
						case GPIOA:  SET_BIT(GPIOA_ODR , Copy_u8Pin); 	break;
						case GPIOB:  SET_BIT(GPIOB_ODR , Copy_u8Pin); 	break;
						case GPIOC:  SET_BIT(GPIOC_ODR , Copy_u8Pin); 	break;
						default       	:  										break;
 8000356:	e051      	b.n	80003fc <GPIO_voidSetPinValue+0xdc>
						case GPIOA:  SET_BIT(GPIOA_ODR , Copy_u8Pin); 	break;
 8000358:	4b2c      	ldr	r3, [pc, #176]	; (800040c <GPIO_voidSetPinValue+0xec>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	79ba      	ldrb	r2, [r7, #6]
 800035e:	2101      	movs	r1, #1
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a29      	ldr	r2, [pc, #164]	; (800040c <GPIO_voidSetPinValue+0xec>)
 8000368:	430b      	orrs	r3, r1
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	e049      	b.n	8000402 <GPIO_voidSetPinValue+0xe2>
						case GPIOB:  SET_BIT(GPIOB_ODR , Copy_u8Pin); 	break;
 800036e:	4b28      	ldr	r3, [pc, #160]	; (8000410 <GPIO_voidSetPinValue+0xf0>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	79ba      	ldrb	r2, [r7, #6]
 8000374:	2101      	movs	r1, #1
 8000376:	fa01 f202 	lsl.w	r2, r1, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a24      	ldr	r2, [pc, #144]	; (8000410 <GPIO_voidSetPinValue+0xf0>)
 800037e:	430b      	orrs	r3, r1
 8000380:	6013      	str	r3, [r2, #0]
 8000382:	e03e      	b.n	8000402 <GPIO_voidSetPinValue+0xe2>
						case GPIOC:  SET_BIT(GPIOC_ODR , Copy_u8Pin); 	break;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <GPIO_voidSetPinValue+0xf4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	4611      	mov	r1, r2
 8000392:	4a20      	ldr	r2, [pc, #128]	; (8000414 <GPIO_voidSetPinValue+0xf4>)
 8000394:	430b      	orrs	r3, r1
 8000396:	6013      	str	r3, [r2, #0]
 8000398:	e033      	b.n	8000402 <GPIO_voidSetPinValue+0xe2>
					}
				}
				else if(Copy_u8PinValue == GPIO_u8PIN_LOW)
 800039a:	797b      	ldrb	r3, [r7, #5]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d130      	bne.n	8000402 <GPIO_voidSetPinValue+0xe2>
				{
					switch(Copy_u8Port)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d01e      	beq.n	80003e4 <GPIO_voidSetPinValue+0xc4>
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	dc2a      	bgt.n	8000400 <GPIO_voidSetPinValue+0xe0>
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d002      	beq.n	80003b4 <GPIO_voidSetPinValue+0x94>
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d00c      	beq.n	80003cc <GPIO_voidSetPinValue+0xac>
					{
						case GPIOA:  CLR_BIT(GPIOA_ODR , Copy_u8Pin); 	break;
						case GPIOB:  CLR_BIT(GPIOB_ODR , Copy_u8Pin); 	break;
						case GPIOC:  CLR_BIT(GPIOC_ODR , Copy_u8Pin); 	break;
						default       	:  										break;
 80003b2:	e025      	b.n	8000400 <GPIO_voidSetPinValue+0xe0>
						case GPIOA:  CLR_BIT(GPIOA_ODR , Copy_u8Pin); 	break;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <GPIO_voidSetPinValue+0xec>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	79ba      	ldrb	r2, [r7, #6]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a11      	ldr	r2, [pc, #68]	; (800040c <GPIO_voidSetPinValue+0xec>)
 80003c6:	400b      	ands	r3, r1
 80003c8:	6013      	str	r3, [r2, #0]
 80003ca:	e01a      	b.n	8000402 <GPIO_voidSetPinValue+0xe2>
						case GPIOB:  CLR_BIT(GPIOB_ODR , Copy_u8Pin); 	break;
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <GPIO_voidSetPinValue+0xf0>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	79ba      	ldrb	r2, [r7, #6]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	43d2      	mvns	r2, r2
 80003da:	4611      	mov	r1, r2
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <GPIO_voidSetPinValue+0xf0>)
 80003de:	400b      	ands	r3, r1
 80003e0:	6013      	str	r3, [r2, #0]
 80003e2:	e00e      	b.n	8000402 <GPIO_voidSetPinValue+0xe2>
						case GPIOC:  CLR_BIT(GPIOC_ODR , Copy_u8Pin); 	break;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <GPIO_voidSetPinValue+0xf4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	79ba      	ldrb	r2, [r7, #6]
 80003ea:	2101      	movs	r1, #1
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a07      	ldr	r2, [pc, #28]	; (8000414 <GPIO_voidSetPinValue+0xf4>)
 80003f6:	400b      	ands	r3, r1
 80003f8:	6013      	str	r3, [r2, #0]
 80003fa:	e002      	b.n	8000402 <GPIO_voidSetPinValue+0xe2>
						default       	:  										break;
 80003fc:	bf00      	nop
 80003fe:	e000      	b.n	8000402 <GPIO_voidSetPinValue+0xe2>
						default       	:  										break;
 8000400:	bf00      	nop
					}
				}
			}
		}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	4001080c 	.word	0x4001080c
 8000410:	40010c0c 	.word	0x40010c0c
 8000414:	4001100c 	.word	0x4001100c

08000418 <RCC_voidInit>:
#include "RCC_config.h"



void RCC_voidInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	#if		RCC_CLOCK_SOURCE == RCC_HSI
			/* System Clock Switch */
			CLR_BIT(RCC_CFGR , RCC_CFGR_SW0);
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <RCC_voidInit+0x40>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <RCC_voidInit+0x40>)
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]
			CLR_BIT(RCC_CFGR , RCC_CFGR_SW1);
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <RCC_voidInit+0x40>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <RCC_voidInit+0x40>)
 800042e:	f023 0302 	bic.w	r3, r3, #2
 8000432:	6013      	str	r3, [r2, #0]

			/* Enable the External Clock for RCC */
			SET_BIT(RCC_CR , RCC_CR_HSION);
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <RCC_voidInit+0x44>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a08      	ldr	r2, [pc, #32]	; (800045c <RCC_voidInit+0x44>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6013      	str	r3, [r2, #0]

			/* Check for the flag of Internal Clock Enable ... Polling */
			while(GET_BIT(RCC_CR , RCC_CR_HSIRDY) == 0);		// NOTE: This bit is read only, So I can not clear the flag
 8000440:	bf00      	nop
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <RCC_voidInit+0x44>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f9      	beq.n	8000442 <RCC_voidInit+0x2a>
			while(GET_BIT(RCC_CR , RCC_CR_PLLRDY) == 0);		// NOTE: This bit is read only, So I can not clear the flag

	#else
		#error "INVALID RCC CLOCK SOURCE"
	#endif
}
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021004 	.word	0x40021004
 800045c:	40021000 	.word	0x40021000

08000460 <RCC_voidEnableClockPeripheral>:


void RCC_voidEnableClockPeripheral(u8 Copy_u8Bus_ID , u8 Copy_u8Peripheral_ID)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	460a      	mov	r2, r1
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	4613      	mov	r3, r2
 800046e:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8Peripheral_ID < 32)
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	2b1f      	cmp	r3, #31
 8000474:	d82b      	bhi.n	80004ce <RCC_voidEnableClockPeripheral+0x6e>
	{
		switch(Copy_u8Bus_ID)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b06      	cmp	r3, #6
 800047a:	d011      	beq.n	80004a0 <RCC_voidEnableClockPeripheral+0x40>
 800047c:	2b06      	cmp	r3, #6
 800047e:	dc25      	bgt.n	80004cc <RCC_voidEnableClockPeripheral+0x6c>
 8000480:	2b01      	cmp	r3, #1
 8000482:	d002      	beq.n	800048a <RCC_voidEnableClockPeripheral+0x2a>
 8000484:	2b03      	cmp	r3, #3
 8000486:	d016      	beq.n	80004b6 <RCC_voidEnableClockPeripheral+0x56>
		{
			case RCC_BUS_AHB  	:	SET_BIT(RCC_AHBENR, Copy_u8Peripheral_ID); 			break;
			case RCC_BUS_APB2 	:	SET_BIT(RCC_APB2ENR, Copy_u8Peripheral_ID); 		break;
			case RCC_BUS_APB1 	:	SET_BIT(RCC_APB1ENR, Copy_u8Peripheral_ID); 		break;
			default				:														break;
 8000488:	e020      	b.n	80004cc <RCC_voidEnableClockPeripheral+0x6c>
			case RCC_BUS_AHB  	:	SET_BIT(RCC_AHBENR, Copy_u8Peripheral_ID); 			break;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <RCC_voidEnableClockPeripheral+0x78>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	79ba      	ldrb	r2, [r7, #6]
 8000490:	2101      	movs	r1, #1
 8000492:	fa01 f202 	lsl.w	r2, r1, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <RCC_voidEnableClockPeripheral+0x78>)
 800049a:	430b      	orrs	r3, r1
 800049c:	6013      	str	r3, [r2, #0]
 800049e:	e016      	b.n	80004ce <RCC_voidEnableClockPeripheral+0x6e>
			case RCC_BUS_APB2 	:	SET_BIT(RCC_APB2ENR, Copy_u8Peripheral_ID); 		break;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <RCC_voidEnableClockPeripheral+0x7c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <RCC_voidEnableClockPeripheral+0x7c>)
 80004b0:	430b      	orrs	r3, r1
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	e00b      	b.n	80004ce <RCC_voidEnableClockPeripheral+0x6e>
			case RCC_BUS_APB1 	:	SET_BIT(RCC_APB1ENR, Copy_u8Peripheral_ID); 		break;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <RCC_voidEnableClockPeripheral+0x80>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	79ba      	ldrb	r2, [r7, #6]
 80004bc:	2101      	movs	r1, #1
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <RCC_voidEnableClockPeripheral+0x80>)
 80004c6:	430b      	orrs	r3, r1
 80004c8:	6013      	str	r3, [r2, #0]
 80004ca:	e000      	b.n	80004ce <RCC_voidEnableClockPeripheral+0x6e>
			default				:														break;
 80004cc:	bf00      	nop
	}
	else
	{
		// Do nothing
	}
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021014 	.word	0x40021014
 80004dc:	40021018 	.word	0x40021018
 80004e0:	4002101c 	.word	0x4002101c

080004e4 <USART2_voidInit>:
#define THRESHOLD_VALUE  9000000UL
void (*USART2_CallBack)(void);



void USART2_voidInit ( void ){
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0

	u32 LOC_u64Mantissa2 = ( F_CPU ) / ( 16 * USART2_BAUD_RATE ) ;// 15.27 * 100 = 1527
 80004ea:	2334      	movs	r3, #52	; 0x34
 80004ec:	607b      	str	r3, [r7, #4]

	u32 LOC_u64Fraction2 = ( ( ( F_CPU * 100 ) / ( 16 * USART2_BAUD_RATE )  ) % 100 ) * 16 ;
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	603b      	str	r3, [r7, #0]

	if( LOC_u64Fraction2 > 1500 ){ LOC_u64Mantissa2 += 1 ; LOC_u64Fraction2  = 0 ; }
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d904      	bls.n	8000506 <USART2_voidInit+0x22>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3301      	adds	r3, #1
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]

	#if USART2_STATUS == USART2_ENABLE

		USART2 -> SR = 0 ;
 8000506:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <USART2_voidInit+0xc0>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]

#if   USART2_WORD_LENGTH == _8BIT_WORD_LENGTH

					CLR_BIT( USART2 -> CR1 , 12 );
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <USART2_voidInit+0xc0>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	4a24      	ldr	r2, [pc, #144]	; (80005a4 <USART2_voidInit+0xc0>)
 8000512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000516:	60d3      	str	r3, [r2, #12]

#endif

#if   USART2_PARITY == PARITY_DISABLE

					CLR_BIT( USART2 -> CR1 , 10 );
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <USART2_voidInit+0xc0>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <USART2_voidInit+0xc0>)
 800051e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000522:	60d3      	str	r3, [r2, #12]

#endif

#if  USART2_INTERRUPT == INT_DISABLE

					CLR_BIT( USART2 -> CR1 , 5 );
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <USART2_voidInit+0xc0>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4a1e      	ldr	r2, [pc, #120]	; (80005a4 <USART2_voidInit+0xc0>)
 800052a:	f023 0320 	bic.w	r3, r3, #32
 800052e:	60d3      	str	r3, [r2, #12]
					CLR_BIT( USART2 -> CR1 , 6 );
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <USART2_voidInit+0xc0>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <USART2_voidInit+0xc0>)
 8000536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800053a:	60d3      	str	r3, [r2, #12]
					CLR_BIT( USART2 -> CR1 , 7 );
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <USART2_voidInit+0xc0>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <USART2_voidInit+0xc0>)
 8000542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000546:	60d3      	str	r3, [r2, #12]

#endif

#if   USART2_TRANSMITTER == TRANSMITTER_ENABLE

					SET_BIT( USART2 -> CR1 , 3 );
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <USART2_voidInit+0xc0>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <USART2_voidInit+0xc0>)
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	60d3      	str	r3, [r2, #12]

#endif

#if   USART2_RECEIVER == RECEIVER_ENABLE

					SET_BIT( USART2 -> CR1 , 2 );
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <USART2_voidInit+0xc0>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <USART2_voidInit+0xc0>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	60d3      	str	r3, [r2, #12]

#endif

#if   USART2_STOP_BITS == ONE_STOP_BIT

					CLR_BIT( USART2 -> CR2 , 12 ); CLR_BIT( USART2 -> CR2 , 13 );
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <USART2_voidInit+0xc0>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <USART2_voidInit+0xc0>)
 8000566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800056a:	6113      	str	r3, [r2, #16]
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <USART2_voidInit+0xc0>)
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <USART2_voidInit+0xc0>)
 8000572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000576:	6113      	str	r3, [r2, #16]
					SET_BIT( USART2 -> CR2 , 12 ); SET_BIT( USART2 -> CR2 , 13 );


#endif

		USART2 -> BRR = ( LOC_u64Mantissa2 << 4  ) | ( LOC_u64Fraction2 / 100 ) ;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	011a      	lsls	r2, r3, #4
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	490a      	ldr	r1, [pc, #40]	; (80005a8 <USART2_voidInit+0xc4>)
 8000580:	fba1 1303 	umull	r1, r3, r1, r3
 8000584:	095b      	lsrs	r3, r3, #5
 8000586:	4907      	ldr	r1, [pc, #28]	; (80005a4 <USART2_voidInit+0xc0>)
 8000588:	4313      	orrs	r3, r2
 800058a:	608b      	str	r3, [r1, #8]
		SET_BIT( USART2 -> CR1 , 13 );
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <USART2_voidInit+0xc0>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <USART2_voidInit+0xc0>)
 8000592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000596:	60d3      	str	r3, [r2, #12]
		CLR_BIT( USART2 -> CR1 , 13 );

	#endif


}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40004400 	.word	0x40004400
 80005a8:	51eb851f 	.word	0x51eb851f

080005ac <USART2_u8RecCharSynch>:

}



u8 USART2_u8RecCharSynch ( void ){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0

	u8  LOC_u8Data  = 0 ;
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]
	u32 LOC_TimeOut = 0 ;
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]

	CLR_BIT ( USART2 -> SR, 5);
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <USART2_u8RecCharSynch+0x58>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <USART2_u8RecCharSynch+0x58>)
 80005c0:	f023 0320 	bic.w	r3, r3, #32
 80005c4:	6013      	str	r3, [r2, #0]

	while( ( GET_BIT ( USART2 -> SR, 5) == 0 ) && ( LOC_TimeOut < THRESHOLD_VALUE ) )
 80005c6:	e002      	b.n	80005ce <USART2_u8RecCharSynch+0x22>
	{
		LOC_TimeOut++;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	603b      	str	r3, [r7, #0]
	while( ( GET_BIT ( USART2 -> SR, 5) == 0 ) && ( LOC_TimeOut < THRESHOLD_VALUE ) )
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <USART2_u8RecCharSynch+0x58>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <USART2_u8RecCharSynch+0x36>
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <USART2_u8RecCharSynch+0x5c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d9f2      	bls.n	80005c8 <USART2_u8RecCharSynch+0x1c>
	}

	if( LOC_TimeOut == THRESHOLD_VALUE )
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <USART2_u8RecCharSynch+0x60>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d102      	bne.n	80005f0 <USART2_u8RecCharSynch+0x44>
	{
		LOC_u8Data = 255;
 80005ea:	23ff      	movs	r3, #255	; 0xff
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	e002      	b.n	80005f6 <USART2_u8RecCharSynch+0x4a>
	}
	else
	{

		LOC_u8Data = USART2 -> DR;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <USART2_u8RecCharSynch+0x58>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	71fb      	strb	r3, [r7, #7]
	}

	return LOC_u8Data;
 80005f6:	79fb      	ldrb	r3, [r7, #7]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40004400 	.word	0x40004400
 8000608:	0089543f 	.word	0x0089543f
 800060c:	00895440 	.word	0x00895440

08000610 <USART2_IRQHandler>:
}




void USART2_IRQHandler(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

	USART2 -> SR = 0 ;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <USART2_IRQHandler+0x14>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	USART2_CallBack();
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <USART2_IRQHandler+0x18>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4798      	blx	r3

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40004400 	.word	0x40004400
 8000628:	2000001c 	.word	0x2000001c

0800062c <main>:
#define 	USART2_TX		GPIO_u8PIN2
#define 	USART2_RX		GPIO_u8PIN3


int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

	u8 Local_u8RecievedData = 0 ;
 8000632:	2300      	movs	r3, #0
 8000634:	71fb      	strb	r3, [r7, #7]

	RCC_voidInit();
 8000636:	f7ff feef 	bl	8000418 <RCC_voidInit>
	RCC_voidEnableClockPeripheral(RCC_BUS_APB2, RCC_APB2_GPIOA);
 800063a:	2102      	movs	r1, #2
 800063c:	2006      	movs	r0, #6
 800063e:	f7ff ff0f 	bl	8000460 <RCC_voidEnableClockPeripheral>
	RCC_voidEnableClockPeripheral(RCC_BUS_APB1, RCC_APB1_USART2);
 8000642:	2111      	movs	r1, #17
 8000644:	2003      	movs	r0, #3
 8000646:	f7ff ff0b 	bl	8000460 <RCC_voidEnableClockPeripheral>


	GPIO_voidSetPinDirection(GPIOA, USART2_TX, GPIO_PIN_OUTPUT_2MHZ_AF_PUSH_PULL);	// TX		alternate function
 800064a:	220a      	movs	r2, #10
 800064c:	2102      	movs	r1, #2
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff fd8e 	bl	8000170 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA, USART2_RX, GPIO_PIN_INPUT_FLOATING);			// RX
 8000654:	2204      	movs	r2, #4
 8000656:	2103      	movs	r1, #3
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff fd89 	bl	8000170 <GPIO_voidSetPinDirection>

	GPIO_voidSetPinDirection(GPIOA, GPIO_u8PIN0, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA0
 800065e:	2202      	movs	r2, #2
 8000660:	2100      	movs	r1, #0
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fd84 	bl	8000170 <GPIO_voidSetPinDirection>

	USART2_voidInit();
 8000668:	f7ff ff3c 	bl	80004e4 <USART2_voidInit>

	while(1)
	{
		Local_u8RecievedData = USART2_u8RecCharSynch();
 800066c:	f7ff ff9e 	bl	80005ac <USART2_u8RecCharSynch>
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
		if( Local_u8RecievedData == '0')
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b30      	cmp	r3, #48	; 0x30
 8000678:	d105      	bne.n	8000686 <main+0x5a>
		{
			GPIO_voidSetPinValue(GPIOA, GPIO_u8PIN0, GPIO_u8PIN_LOW);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fe4e 	bl	8000320 <GPIO_voidSetPinValue>
 8000684:	e7f2      	b.n	800066c <main+0x40>
		}
		else if(Local_u8RecievedData == '1' )
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b31      	cmp	r3, #49	; 0x31
 800068a:	d1ef      	bne.n	800066c <main+0x40>
		{
			GPIO_voidSetPinValue(GPIOA, GPIO_u8PIN0, GPIO_u8PIN_HIGH);
 800068c:	2201      	movs	r2, #1
 800068e:	2100      	movs	r1, #0
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fe45 	bl	8000320 <GPIO_voidSetPinValue>
		Local_u8RecievedData = USART2_u8RecCharSynch();
 8000696:	e7e9      	b.n	800066c <main+0x40>

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c6:	f000 f811 	bl	80006ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff ffaf 	bl	800062c <main>

080006ce <LoopForever>:

LoopForever:
  b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006dc:	08000754 	.word	0x08000754
  ldr r2, =_sbss
 80006e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006e4:	20000020 	.word	0x20000020

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <__libc_init_array>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	2600      	movs	r6, #0
 80006f0:	4d0c      	ldr	r5, [pc, #48]	; (8000724 <__libc_init_array+0x38>)
 80006f2:	4c0d      	ldr	r4, [pc, #52]	; (8000728 <__libc_init_array+0x3c>)
 80006f4:	1b64      	subs	r4, r4, r5
 80006f6:	10a4      	asrs	r4, r4, #2
 80006f8:	42a6      	cmp	r6, r4
 80006fa:	d109      	bne.n	8000710 <__libc_init_array+0x24>
 80006fc:	f000 f81a 	bl	8000734 <_init>
 8000700:	2600      	movs	r6, #0
 8000702:	4d0a      	ldr	r5, [pc, #40]	; (800072c <__libc_init_array+0x40>)
 8000704:	4c0a      	ldr	r4, [pc, #40]	; (8000730 <__libc_init_array+0x44>)
 8000706:	1b64      	subs	r4, r4, r5
 8000708:	10a4      	asrs	r4, r4, #2
 800070a:	42a6      	cmp	r6, r4
 800070c:	d105      	bne.n	800071a <__libc_init_array+0x2e>
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f855 3b04 	ldr.w	r3, [r5], #4
 8000714:	4798      	blx	r3
 8000716:	3601      	adds	r6, #1
 8000718:	e7ee      	b.n	80006f8 <__libc_init_array+0xc>
 800071a:	f855 3b04 	ldr.w	r3, [r5], #4
 800071e:	4798      	blx	r3
 8000720:	3601      	adds	r6, #1
 8000722:	e7f2      	b.n	800070a <__libc_init_array+0x1e>
 8000724:	0800074c 	.word	0x0800074c
 8000728:	0800074c 	.word	0x0800074c
 800072c:	0800074c 	.word	0x0800074c
 8000730:	08000750 	.word	0x08000750

08000734 <_init>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	bf00      	nop
 8000738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073a:	bc08      	pop	{r3}
 800073c:	469e      	mov	lr, r3
 800073e:	4770      	bx	lr

08000740 <_fini>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	bf00      	nop
 8000744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000746:	bc08      	pop	{r3}
 8000748:	469e      	mov	lr, r3
 800074a:	4770      	bx	lr
