/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#include <stdint.h>

#include "../Inc/STD_TYPES.h"
#include "../Inc/RCC_interface.h"
#include "../Inc/GPIO_interface.h"
#include "../Inc/USART2_interface.h"
#include "../Inc/RTOS_interface.h"
#include "../Inc/TIMERx_interface.h"
#include "../Inc/main.h"


/* Moving Motor is motor A   -  Steering motor is motor B */
#define 	MotorA1			GPIO_u8PIN0
#define 	MotorA2			GPIO_u8PIN1
#define 	USART2_TX		GPIO_u8PIN2
#define 	USART2_RX		GPIO_u8PIN3
#define 	MotorB1			GPIO_u8PIN4
#define 	MotorB2			GPIO_u8PIN5
#define 	MotorA_EN		GPIO_u8PIN6
#define 	MotorB_EN		GPIO_u8PIN7



void Move_Forward(u8 copy_u8Duty);
//void Move_Backward(void);
//void Stop_Motor_A(void);
//
//void Turn_Left(void);
//void Turn_Right(void);
//void Stop_Motor_B(void);
//
//void Stop(void);



//void Button_Reading(void);
//void Update_Car_Movement(void);
//
//
//u8 RecievedDataBuffer = '0';

int main(void)
{

	RCC_voidInit();
	RCC_voidEnableClockPeripheral(RCC_BUS_APB2, RCC_APB2_GPIOA);
	RCC_voidEnableClockPeripheral(RCC_BUS_APB1, RCC_APB1_USART2);
	RCC_voidEnableClockPeripheral(RCC_BUS_APB1, RCC_APB1_TIM3);

	/* Set the pins directions */
	GPIO_voidSetPinDirection(GPIOA, MotorA1, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA0
	GPIO_voidSetPinDirection(GPIOA, MotorA2, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA1

	GPIO_voidSetPinDirection(GPIOA, USART2_TX, GPIO_PIN_OUTPUT_2MHZ_AF_PUSH_PULL);	// TX  	Alternate Function
	GPIO_voidSetPinDirection(GPIOA, USART2_RX, GPIO_PIN_INPUT_FLOATING);			// RX

	GPIO_voidSetPinDirection(GPIOA, MotorB1, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA4
	GPIO_voidSetPinDirection(GPIOA, MotorB2, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA5

	/* Remember to check if it is alternate function or not */
	GPIO_voidSetPinDirection(GPIOA, MotorA_EN, GPIO_PIN_OUTPUT_2MHZ_AF_PUSH_PULL);	// PWM3/1	Alternate Function
	GPIO_voidSetPinDirection(GPIOA, MotorB_EN, GPIO_PIN_OUTPUT_2MHZ_AF_PUSH_PULL);	// PWM3/2


	/* Initialize USA*/
	USART2_voidInit();
	//TIM3_PWM_Init();


	while(1)
	{
			// 0      	255
			// 0		100
		//u8 num=0 , Pot_Val;
		Pot_Val = USART2_u8RecCharSynch();

		GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
		GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);

//		while(Pot_Val != 12) // 25E
//		{
//			num = num*10 + (Pot_Val - '0');
//			Pot_Val = USART2_u8RecCharSynch();
//		}

		//Move_Forward(num);
	}

//	RTOS_voidCreateTask( 0, 2, Button_Reading, 0);	// Each 20 milliseconds , With periodicity = 2*10 = 20 milliseconds
//	RTOS_voidCreateTask( 1, 2, Update_Car_Movement, 1);	// Each 20 milliseconds  with First delay = 10 milliseconds
//
//
//	RTOS_voidStart();
//
//
//	while(1)
//	{
//
//	}
	return 0;
}


void Move_Forward(u8 copy_u8Duty)
{
	TIM3_PWM_CH1_Generate(copy_u8Duty);
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);
}


//
//void Button_Reading(void)
//{
//	RecievedDataBuffer = USART2_u8RecCharSynch();
//}
//
//
//
///* 'F' MA fwd
// * 'B' MA	bwd
// * 'S' MA s
// *
// * 'R' MB ->
// * 'L' MB <-
// * 'N' no direction
// *
// * '0' default */
//void Update_Car_Movement(void)
//{
//	/* Motor A Functions */
//	if( RecievedDataBuffer == 'F')
//	{
//		/* For more safety */
//		Stop_Motor_A(); 	//stop MA immediately
//		Move_Forward();
//		//RecievedDataBuffer = '0';	// give semaphore
//	}
//	else if(RecievedDataBuffer == 'B' )
//	{
//		Stop_Motor_A();
//		Move_Backward();
//		//RecievedDataBuffer = '0';	// give semaphore
//	}
//	else if(RecievedDataBuffer == 'S' )
//	{
//		Stop_Motor_A();
//		//RecievedDataBuffer = '0';	// give semaphore
//	}
//
//
//	/* Motor B Functions */
//	else if(RecievedDataBuffer == 'R' )
//	{
//		Stop_Motor_B();
//		Turn_Right();
//		//RecievedDataBuffer = '0';	// give semaphore
//	}
//	else if(RecievedDataBuffer == 'L' )
//	{
//		Stop_Motor_B();
//		Turn_Left();
//		//RecievedDataBuffer = '0';	// give semaphore
//	}
//	else if(RecievedDataBuffer == 'N' )
//	{
//		Stop_Motor_B();
//		//RecievedDataBuffer = '0';	// give semaphore
//	}
//
//
//
//	/* Default State */
//	else if(RecievedDataBuffer == '0' )
//	{
//		Stop();
//	}
//}
//
//
//
//
///* Motor A Functions */
//void Move_Forward(void)
//{
//	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
//	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);
//}
//
//
//
//void Move_Backward(void)
//{
//	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_HIGH);
//	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);
//}
//
//
//void Stop_Motor_A(void)
//{
//	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
//	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);
//}
//
//
//
///* Motor B Functions */
//void Turn_Left(void)
//{
//	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_HIGH);
//	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
//}
//
//
//void Turn_Right(void)
//{
//	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
//	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_HIGH);
//}
//
//void Stop_Motor_B(void)
//{
//	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
//	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
//}
//
//
//
//
///* Default State */
//void Stop(void)
//{
//	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
//	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);
//
//	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
//	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
//}
//
//
//



