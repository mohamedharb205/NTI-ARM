/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#include <stdint.h>

#include "../Inc/STD_TYPES.h"
#include "../Inc/RCC_interface.h"
#include "../Inc/GPIO_interface.h"
#include "../Inc/main.h"



#define 	MotorA1			GPIO_u8PIN0
#define 	MotorA2			GPIO_u8PIN1
#define 	USART2_TX		GPIO_u8PIN2
#define 	USART2_RX		GPIO_u8PIN3
#define 	MotorB1			GPIO_u8PIN5
#define 	MotorB2			GPIO_u8PIN6
#define 	MotorA_EN		GPIO_u8PIN8
#define 	MotorB_EN		GPIO_u8PIN9



void Move_Forward_S(void);
void Move_Forward_L(void);
void Move_Forward_R(void);
void Move_Backward_S(void);
void Move_Backward_L(void);
void Move_Backward_R(void);
void Turn_Left(void);
void Turn_Right(void);
void Stop(void);




int main(void)
{
	MoveMotor();

	return 0;
}



void MoveMotor(void)
{
	RCC_voidInit();
	RCC_voidEnableClockPeripheral(RCC_BUS_APB2, RCC_APB2_GPIOA);

	GPIO_voidSetPinDirection(GPIOA, MotorA1, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA0
	GPIO_voidSetPinDirection(GPIOA, MotorA2, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA1

	GPIO_voidSetPinDirection(GPIOA, USART2_TX, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// TX
	GPIO_voidSetPinDirection(GPIOA, USART2_RX, GPIO_PIN_INPUT_FLOATING);		// RX

	GPIO_voidSetPinDirection(GPIOA, MotorB1, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA5
	GPIO_voidSetPinDirection(GPIOA, MotorB2, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA6

	GPIO_voidSetPinDirection(GPIOA, MotorA_EN, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PWM1/1
	GPIO_voidSetPinDirection(GPIOA, MotorB_EN, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PWM1/2



    /* Loop forever */
	while(1)		//for(;;);
	{
		Move_Forward_S();
		Delay(500);

		Move_Forward_L();
		Delay(500);

		Move_Forward_R();
		Delay(500);

		Move_Backward_S();
		Delay(500);

		Move_Backward_L();
		Delay(500);

		Move_Backward_R();
		Delay(500);

		Turn_Left();
		Delay(500);

		Turn_Right();
		Delay(500);

		Stop();
		Delay(500);
	}
}



void Move_Forward_S(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Forward_L(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Forward_R(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_HIGH);
}


void Move_Backward_S(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Backward_L(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Backward_R(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_HIGH);
}


void Turn_Left(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Turn_Right(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_HIGH);
}


void Stop(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}




void Delay(u32 Copy_u32T_ms)
{
	for(u32 Local_u32Counter = 0; Local_u32Counter < (Copy_u32T_ms * 500); Local_u32Counter++)
	{
		asm("NOP");
	}
}


