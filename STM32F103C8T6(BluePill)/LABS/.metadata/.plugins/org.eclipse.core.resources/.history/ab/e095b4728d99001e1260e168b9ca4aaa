/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#include <stdint.h>

#include "../Inc/STD_TYPES.h"
#include "../Inc/RCC_interface.h"
#include "../Inc/GPIO_interface.h"
#include "../Inc/USART2_interface.h"
#include "../Inc/RTOS_interface.h"
#include "../Inc/main.h"


/* Moving Motor is motor A   -  Steering motor is motor B */
#define 	MotorA1			GPIO_u8PIN0
#define 	MotorA2			GPIO_u8PIN1
#define 	USART2_TX		GPIO_u8PIN2
#define 	USART2_RX		GPIO_u8PIN3
#define 	MotorB1			GPIO_u8PIN5
#define 	MotorB2			GPIO_u8PIN6
#define 	MotorA_EN		GPIO_u8PIN8
#define 	MotorB_EN		GPIO_u8PIN9



void Move_Forward_S(void);
void Move_Forward_L(void);
void Move_Forward_R(void);
void Move_Backward_S(void);
void Move_Backward_L(void);
void Move_Backward_R(void);
void Turn_Left(void);
void Turn_Right(void);
void Stop(void);



void Task1(void);
void Task2(void);


u8 RecievedDataBuffer = 'S' ;

int main(void)
{

	RCC_voidInit();
	RCC_voidEnableClockPeripheral(RCC_BUS_APB2, RCC_APB2_GPIOA);
	RCC_voidEnableClockPeripheral(RCC_BUS_APB1, RCC_APB1_USART2);

	/* Set the pins directions */
	GPIO_voidSetPinDirection(GPIOA, MotorA1, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA0
	GPIO_voidSetPinDirection(GPIOA, MotorA2, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA1

	GPIO_voidSetPinDirection(GPIOA, USART2_TX, GPIO_PIN_OUTPUT_2MHZ_AF_PUSH_PULL);	// TX  	Alternate Function
	GPIO_voidSetPinDirection(GPIOA, USART2_RX, GPIO_PIN_INPUT_FLOATING);			// RX

	GPIO_voidSetPinDirection(GPIOA, MotorB1, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA5
	GPIO_voidSetPinDirection(GPIOA, MotorB2, GPIO_PIN_OUTPUT_2MHZ_PUSH_PULL);	// PA6

	/* Remember to check if it is alternate function or not */
	GPIO_voidSetPinDirection(GPIOA, MotorA_EN, GPIO_PIN_OUTPUT_2MHZ_AF_PUSH_PULL);	// PWM1/1	Alternate Function
	GPIO_voidSetPinDirection(GPIOA, MotorB_EN, GPIO_PIN_OUTPUT_2MHZ_AF_PUSH_PULL);	// PWM1/2

	/* Initialize USA*/
	USART2_voidInit();

	RTOS_voidCreateTask( 0, 5, Task1, 0);	// Each 20 milliseconds , With periodicity = 5*10 = 50 milliseconds
	RTOS_voidCreateTask( 1, 5, Task2, 1);	// Each 20 milliseconds  with First delay = 10 milliseconds


	RTOS_voidStart();


	while(1)
	{

	}

	return 0;
}


void Task1(void)
{
	RecievedDataBuffer = USART2_u8RecCharSynch();
}

void Task2(void)
{
	if( RecievedDataBuffer == 'F')
	{
		/* For more safety */
		Stop();
		Move_Forward_S();
		RecievedDataBuffer = 'S';	// give semaphore
	}
	else if(RecievedDataBuffer == 'B' )
	{
		Stop();
		Move_Backward_S();
		RecievedDataBuffer = 'S';	// give semaphore
	}
	else if(RecievedDataBuffer == 'R' )
	{
		Stop();
		Move_Forward_R();
		RecievedDataBuffer = 'S';	// give semaphore
	}
	else if(RecievedDataBuffer == 'r' )
	{
		Stop();
		Move_Backward_R();
		RecievedDataBuffer = 'S';	// give semaphore
	}
	else if(RecievedDataBuffer == 'L' )
	{
		Stop();
		Move_Forward_L();
		RecievedDataBuffer = 'S';	// give semaphore
	}
	else if(RecievedDataBuffer == 'l' )
	{
		Stop();
		Move_Backward_L();
		RecievedDataBuffer = 'S';	// give semaphore
	}
	else if(RecievedDataBuffer == 'S' )
	{
		Stop();
		RecievedDataBuffer = 'S';	// give semaphore
	}
}





void Move_Forward_S(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Forward_L(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Forward_R(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_HIGH);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_HIGH);
}


void Move_Backward_S(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Backward_L(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Move_Backward_R(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_HIGH);
}


void Turn_Left(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_HIGH);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}


void Turn_Right(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_HIGH);
}


void Stop(void)
{
	GPIO_voidSetPinValue(GPIOA, MotorA1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorA2, GPIO_u8PIN_LOW);

	GPIO_voidSetPinValue(GPIOA, MotorB1, GPIO_u8PIN_LOW);
	GPIO_voidSetPinValue(GPIOA, MotorB2, GPIO_u8PIN_LOW);
}






