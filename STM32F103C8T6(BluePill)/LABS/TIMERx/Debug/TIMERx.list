
TIMERx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000398  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000398  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005c4  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000233  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  00010c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a0  00000000  00000000  00010ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001282  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000091b  00000000  00000000  00012002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000087ff  00000000  00000000  0001291d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002a0  00000000  00000000  0001b11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0001b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000378 	.word	0x08000378

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000378 	.word	0x08000378

08000170 <TIM2_IRQHandler>:

}



void TIM2_IRQHandler(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) == 0)
 8000174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000178:	691b      	ldr	r3, [r3, #16]
 800017a:	f003 0302 	and.w	r3, r3, #2
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10e      	bne.n	80001a0 <TIM2_IRQHandler+0x30>
	{
		// CC1IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC1IF);
 8000182:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000186:	691b      	ldr	r3, [r3, #16]
 8000188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800018c:	f023 0302 	bic.w	r3, r3, #2
 8000190:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][0] != NULL)
 8000192:	4b25      	ldr	r3, [pc, #148]	; (8000228 <TIM2_IRQHandler+0xb8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d002      	beq.n	80001a0 <TIM2_IRQHandler+0x30>
		{
			input_capture_callback[0][0]();
 800019a:	4b23      	ldr	r3, [pc, #140]	; (8000228 <TIM2_IRQHandler+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM2->SR & TIM_SR_CC2IF) == 0) {
 80001a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001a4:	691b      	ldr	r3, [r3, #16]
 80001a6:	f003 0304 	and.w	r3, r3, #4
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d10e      	bne.n	80001cc <TIM2_IRQHandler+0x5c>
		// CC2IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC2IF);
 80001ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001b2:	691b      	ldr	r3, [r3, #16]
 80001b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001b8:	f023 0304 	bic.w	r3, r3, #4
 80001bc:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][1] != NULL) {
 80001be:	4b1a      	ldr	r3, [pc, #104]	; (8000228 <TIM2_IRQHandler+0xb8>)
 80001c0:	685b      	ldr	r3, [r3, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d002      	beq.n	80001cc <TIM2_IRQHandler+0x5c>
			input_capture_callback[0][1]();
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <TIM2_IRQHandler+0xb8>)
 80001c8:	685b      	ldr	r3, [r3, #4]
 80001ca:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM2->SR & TIM_SR_CC3IF) == 0) {
 80001cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001d0:	691b      	ldr	r3, [r3, #16]
 80001d2:	f003 0308 	and.w	r3, r3, #8
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d10e      	bne.n	80001f8 <TIM2_IRQHandler+0x88>
		// CC3IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC3IF);
 80001da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001de:	691b      	ldr	r3, [r3, #16]
 80001e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001e4:	f023 0308 	bic.w	r3, r3, #8
 80001e8:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][2] != NULL) {
 80001ea:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <TIM2_IRQHandler+0xb8>)
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d002      	beq.n	80001f8 <TIM2_IRQHandler+0x88>
			input_capture_callback[0][2]();
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <TIM2_IRQHandler+0xb8>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM2->SR & TIM_SR_CC4IF) == 0) {
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fc:	691b      	ldr	r3, [r3, #16]
 80001fe:	f003 0310 	and.w	r3, r3, #16
 8000202:	2b00      	cmp	r3, #0
 8000204:	d10e      	bne.n	8000224 <TIM2_IRQHandler+0xb4>
		// CC4IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC4IF);
 8000206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000210:	f023 0310 	bic.w	r3, r3, #16
 8000214:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][3] != NULL) {
 8000216:	4b04      	ldr	r3, [pc, #16]	; (8000228 <TIM2_IRQHandler+0xb8>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d002      	beq.n	8000224 <TIM2_IRQHandler+0xb4>
			input_capture_callback[0][3]();
 800021e:	4b02      	ldr	r3, [pc, #8]	; (8000228 <TIM2_IRQHandler+0xb8>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	4798      	blx	r3
		}
	}
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000001c 	.word	0x2000001c

0800022c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM3->SR & TIM_SR_CC1IF) == 0)
 8000230:	4b26      	ldr	r3, [pc, #152]	; (80002cc <TIM3_IRQHandler+0xa0>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d10c      	bne.n	8000256 <TIM3_IRQHandler+0x2a>
	{
		// CC1IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC1IF);
 800023c:	4b23      	ldr	r3, [pc, #140]	; (80002cc <TIM3_IRQHandler+0xa0>)
 800023e:	691b      	ldr	r3, [r3, #16]
 8000240:	4a22      	ldr	r2, [pc, #136]	; (80002cc <TIM3_IRQHandler+0xa0>)
 8000242:	f023 0302 	bic.w	r3, r3, #2
 8000246:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][0] != NULL)
 8000248:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 800024a:	691b      	ldr	r3, [r3, #16]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d002      	beq.n	8000256 <TIM3_IRQHandler+0x2a>
		{
			input_capture_callback[1][0]();
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM3->SR & TIM_SR_CC2IF) == 0) {
 8000256:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <TIM3_IRQHandler+0xa0>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10c      	bne.n	800027c <TIM3_IRQHandler+0x50>
		// CC2IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC2IF);
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <TIM3_IRQHandler+0xa0>)
 8000264:	691b      	ldr	r3, [r3, #16]
 8000266:	4a19      	ldr	r2, [pc, #100]	; (80002cc <TIM3_IRQHandler+0xa0>)
 8000268:	f023 0304 	bic.w	r3, r3, #4
 800026c:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][1] != NULL) {
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d002      	beq.n	800027c <TIM3_IRQHandler+0x50>
			input_capture_callback[1][1]();
 8000276:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM3->SR & TIM_SR_CC3IF) == 0) {
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <TIM3_IRQHandler+0xa0>)
 800027e:	691b      	ldr	r3, [r3, #16]
 8000280:	f003 0308 	and.w	r3, r3, #8
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10c      	bne.n	80002a2 <TIM3_IRQHandler+0x76>
		// CC3IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC3IF);
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <TIM3_IRQHandler+0xa0>)
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <TIM3_IRQHandler+0xa0>)
 800028e:	f023 0308 	bic.w	r3, r3, #8
 8000292:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][2] != NULL) {
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <TIM3_IRQHandler+0x76>
			input_capture_callback[1][2]();
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM3->SR & TIM_SR_CC4IF) == 0) {
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <TIM3_IRQHandler+0xa0>)
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d10c      	bne.n	80002c8 <TIM3_IRQHandler+0x9c>
		// CC4IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC4IF);
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <TIM3_IRQHandler+0xa0>)
 80002b0:	691b      	ldr	r3, [r3, #16]
 80002b2:	4a06      	ldr	r2, [pc, #24]	; (80002cc <TIM3_IRQHandler+0xa0>)
 80002b4:	f023 0310 	bic.w	r3, r3, #16
 80002b8:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][3] != NULL) {
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d002      	beq.n	80002c8 <TIM3_IRQHandler+0x9c>
			input_capture_callback[1][3]();
 80002c2:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <TIM3_IRQHandler+0xa4>)
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	4798      	blx	r3
		}
	}
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40000400 	.word	0x40000400
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 80002d8:	e7fe      	b.n	80002d8 <main+0x4>
	...

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffe1 	bl	80002d4 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000005c 	.word	0x2000005c

0800032c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC1_2_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	2600      	movs	r6, #0
 8000334:	4d0c      	ldr	r5, [pc, #48]	; (8000368 <__libc_init_array+0x38>)
 8000336:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	f000 f81a 	bl	8000378 <_init>
 8000344:	2600      	movs	r6, #0
 8000346:	4d0a      	ldr	r5, [pc, #40]	; (8000370 <__libc_init_array+0x40>)
 8000348:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <__libc_init_array+0x44>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
